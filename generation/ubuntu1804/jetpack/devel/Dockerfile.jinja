{%- if ctx.drivers.version == "32.3.1" %}
ARG IMAGE_NAME
FROM ${IMAGE_NAME}:{{ ctx.drivers.version }}-{{ ctx.shortName }}-jetpack-{{ ctx.jetpackVersion }}-runtime

# CUDA Toolkit for L4T

RUN apt-get update && \
    apt-get install -y --allow-downgrades --no-install-recommends cuda-toolkit-10-0 && \
    dpkg --purge cuda-repo-l4t-10-0-local-{{ ctx.cuda.toolkit.version }} \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA CUDA Deep Neural Network library (cuDNN)

ENV CUDNN_VERSION ctx.cudnn.libcudnn7.version

ENV CUDNN_PKG_VERSION=${CUDA_VERSION}-1

LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt update && \
    apt install -y --no-install-recommends /{{ ctx.cudnn.libcudnn7.packageName }} {{ ctx.cudnn["libcudnn7-dev"].packageName }} {{ ctx.cudnn["libcudnn7-doc"].packageName }} \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA VisionWorks Toolkit

RUN apt install -y --no-install-recommends libvisionworks-repo && \
    apt-key add /var/visionworks-repo/GPGKEY && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated libvisionworks libvisionworks-dev libvisionworks-samples && \
    dpkg --purge libvisionworks-repo && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA VisionWorks Plus (SFM)
RUN apt install -y --no-install-recommends libvisionworks-sfm-repo && \
    apt-key add /var/visionworks-sfm-repo/GPGKEY && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated libvisionworks-sfm libvisionworks-sfm-dev && \
    dpkg --purge libvisionworks-sfm-repo && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA VisionWorks Object Tracker
RUN apt install -y --no-install-recommends libvisionworks-tracking-repo && \
    apt-key add /var/visionworks-tracking-repo/GPGKEY && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated libvisionworks-tracking libvisionworks-tracking-dev && \
    dpkg --purge libvisionworks-tracking-repo && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
{% else %}
ARG DEPENDENCIES_IMAGE
ARG IMAGE_NAME
FROM ${DEPENDENCIES_IMAGE} as dependencies

ARG IMAGE_NAME
FROM ${IMAGE_NAME}:{{ ctx.drivers.version }}-{{ ctx.shortName }}-jetpack-{{ ctx.jetpackVersion }}-runtime

# CUDA Toolkit for L4T

COPY --from=dependencies /data/{{ ctx.cuda.toolkit.fileName }} {{ ctx.cuda.toolkit.fileName }}
RUN echo "{{ ctx.cuda.toolkit.checksum }} {{ ctx.cuda.toolkit.fileName }}" | md5sum -c - && \
    dpkg --force-all -i {{ ctx.cuda.toolkit.fileName }} && \
    rm {{ ctx.cuda.toolkit.fileName }} && \
    apt-get update && \
    apt-get install -y --allow-downgrades --no-install-recommends cuda-toolkit-10-0 && \
    dpkg --purge cuda-repo-l4t-10-0-local-{{ ctx.cuda.toolkit.version }} \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA CUDA Deep Neural Network library (cuDNN)

ENV CUDNN_VERSION {{ ctx.cudnn.libcudnn7.version }}

LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

COPY --from=dependencies /data/{{ ctx.cudnn.libcudnn7.fileName }} {{ ctx.cudnn.libcudnn7.fileName }}
RUN echo "{{ ctx.cudnn.libcudnn7.checksum }} {{ ctx.cudnn.libcudnn7.fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.cudnn.libcudnn7.fileName }} && \
    rm {{ ctx.cudnn.libcudnn7.fileName }}

COPY --from=dependencies /data/{{ ctx.cudnn['libcudnn7-dev'].fileName }} {{ ctx.cudnn['libcudnn7-dev'].fileName }}
RUN echo "{{ ctx.cudnn['libcudnn7-dev'].checksum }} {{ ctx.cudnn['libcudnn7-dev'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.cudnn['libcudnn7-dev'].fileName }} && \
    rm {{ ctx.cudnn['libcudnn7-dev'].fileName }}

COPY --from=dependencies /data/{{ ctx.cudnn['libcudnn7-doc'].fileName }} {{ ctx.cudnn['libcudnn7-doc'].fileName }}
RUN echo "{{ ctx.cudnn['libcudnn7-doc'].checksum }} {{ ctx.cudnn['libcudnn7-doc'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.cudnn['libcudnn7-doc'].fileName }} && \
    rm {{ ctx.cudnn['libcudnn7-doc'].fileName }}

# NVIDIA VisionWorks Toolkit

COPY --from=dependencies /data/{{ ctx.visionworks.libvisionworks.fileName }} {{ ctx.visionworks.libvisionworks.fileName }}
RUN echo "{{ ctx.visionworks.libvisionworks.checksum }} {{ ctx.visionworks.libvisionworks.fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.visionworks.libvisionworks.fileName }} && \
    apt-key add /var/visionworks-repo/GPGKEY && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated libvisionworks libvisionworks-dev libvisionworks-samples && \
    dpkg --purge libvisionworks-repo && \
    rm {{ ctx.visionworks.libvisionworks.fileName }} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA VisionWorks Plus (SFM)
COPY --from=dependencies /data/{{ ctx.visionworks['libvisionworks-sfm'].fileName }} {{ ctx.visionworks['libvisionworks-sfm'].fileName }}
RUN echo "{{ ctx.visionworks['libvisionworks-sfm'].checksum }} {{ ctx.visionworks['libvisionworks-sfm'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.visionworks['libvisionworks-sfm'].fileName }} && \
    apt-key add /var/visionworks-sfm-repo/GPGKEY && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated libvisionworks-sfm libvisionworks-sfm-dev && \
    dpkg --purge libvisionworks-sfm-repo && \
    rm {{ ctx.visionworks['libvisionworks-sfm'].fileName }} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA VisionWorks Object Tracker
COPY --from=dependencies /data/{{ ctx.visionworks['libvisionworks-tracking'].fileName }} {{ ctx.visionworks['libvisionworks-tracking'].fileName }}
RUN echo "{{ ctx.visionworks['libvisionworks-tracking'].checksum }} {{ ctx.visionworks['libvisionworks-tracking'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.visionworks['libvisionworks-tracking'].fileName }} && \
    apt-key add /var/visionworks-tracking-repo/GPGKEY && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated libvisionworks-tracking libvisionworks-tracking-dev && \
    dpkg --purge libvisionworks-tracking-repo && \
    rm {{ ctx.visionworks['libvisionworks-tracking'].fileName }} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# NVIDIA TensorRT
ENV LIBINFER_VERSION {{ ctx.tensorrt.libnvinfer5.version }}

LABEL com.nvidia.libinfer.version="${LIBINFER_VERSION}"

COPY --from=dependencies /data/{{ ctx.tensorrt.libnvinfer5.fileName }} {{ ctx.tensorrt.libnvinfer5.fileName }}
RUN echo "{{ ctx.tensorrt.libnvinfer5.checksum }} {{ ctx.tensorrt.libnvinfer5.fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt.libnvinfer5.fileName }} && \
    rm {{ ctx.tensorrt.libnvinfer5.fileName }}

COPY --from=dependencies /data/{{ ctx.tensorrt['libnvinfer-dev'].fileName }} {{ ctx.tensorrt['libnvinfer-dev'].fileName }}
RUN echo "{{ ctx.tensorrt['libnvinfer-dev'].checksum }} {{ ctx.tensorrt['libnvinfer-dev'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['libnvinfer-dev'].fileName }} && \
    rm {{ ctx.tensorrt['libnvinfer-dev'].fileName }}

COPY --from=dependencies /data/{{ ctx.tensorrt['libnvinfer-samples'].fileName }} {{ ctx.tensorrt['libnvinfer-samples'].fileName }}
RUN echo "{{ ctx.tensorrt['libnvinfer-samples'].checksum }} {{ ctx.tensorrt['libnvinfer-samples'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['libnvinfer-samples'].fileName }} && \
    rm {{ ctx.tensorrt['libnvinfer-samples'].fileName }}

ENV TENSORRT_VERSION {{ ctx.tensorrt.tensorrt.version }}

LABEL com.nvidia.tensorrt.version="${TENSORRT_VERSION}"

ENV TENSORRT_PKG tensorrt_${TENSORRT_PKG_VERSION}+cuda10.0_arm64.deb

COPY --from=dependencies /data/{{ ctx.tensorrt.tensorrt.fileName }} {{ ctx.tensorrt.tensorrt.fileName }}
RUN echo "{{ ctx.tensorrt.tensorrt.checksum }} {{ ctx.tensorrt.tensorrt.fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt.tensorrt.fileName }} && \
    rm {{ ctx.tensorrt.tensorrt.fileName }}


# Python2 support for TensorRT
COPY --from=dependencies /data/{{ ctx.tensorrt['python-libnvinfer'].fileName }} {{ ctx.tensorrt['python-libnvinfer'].fileName }}
RUN echo "{{ ctx.tensorrt['python-libnvinfer'].checksum }} {{ ctx.tensorrt['python-libnvinfer'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['python-libnvinfer'].fileName }} && \
    rm {{ ctx.tensorrt['python-libnvinfer'].fileName }}

COPY --from=dependencies /data/{{ ctx.tensorrt['python-libnvinfer-dev'].fileName }} {{ ctx.tensorrt['python-libnvinfer-dev'].fileName }}
RUN echo "{{ ctx.tensorrt['python-libnvinfer-dev'].checksum }} {{ ctx.tensorrt['python-libnvinfer-dev'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['python-libnvinfer-dev'].fileName }} && \
    rm {{ ctx.tensorrt['python-libnvinfer-dev'].fileName }}

# Python3 support for TensorRT
COPY --from=dependencies /data/{{ ctx.tensorrt['python3-libnvinfer'].fileName }} {{ ctx.tensorrt['python3-libnvinfer'].fileName }}
RUN echo "{{ ctx.tensorrt['python3-libnvinfer'].checksum }} {{ ctx.tensorrt['python3-libnvinfer'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['python3-libnvinfer'].fileName }} && \
    rm {{ ctx.tensorrt['python3-libnvinfer'].fileName }}

COPY --from=dependencies /data/{{ ctx.tensorrt['python3-libnvinfer-dev'].fileName }} {{ ctx.tensorrt['python3-libnvinfer-dev'].fileName }}
RUN echo "{{ ctx.tensorrt['python3-libnvinfer-dev'].checksum }} {{ ctx.tensorrt['python3-libnvinfer-dev'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['python3-libnvinfer-dev'].fileName }} && \
    rm {{ ctx.tensorrt['python3-libnvinfer-dev'].fileName }}

# Graph Surgeon
COPY --from=dependencies /data/{{ ctx.tensorrt['graphsurgeon-tf'].fileName }} {{ ctx.tensorrt['graphsurgeon-tf'].fileName }}
RUN echo "{{ ctx.tensorrt['graphsurgeon-tf'].checksum }} {{ ctx.tensorrt['graphsurgeon-tf'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['graphsurgeon-tf'].fileName }} && \
    rm {{ ctx.tensorrt['graphsurgeon-tf'].fileName }}

# UFF Converter
COPY --from=dependencies /data/{{ ctx.tensorrt['uff-converter-tf'].fileName }} {{ ctx.tensorrt['uff-converter-tf'].fileName }}
RUN echo "{{ ctx.tensorrt['uff-converter-tf'].checksum }} {{ ctx.tensorrt['uff-converter-tf'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.tensorrt['uff-converter-tf'].fileName }} && \
    rm {{ ctx.tensorrt['uff-converter-tf'].fileName }}

# Multimedia API
# 6b870acbb906fc923828e110d23a096f8450fc7f  Tegra_Multimedia_API_R32.2.1_aarch64.tbz2
# Skipping unless needed.

# Install dependencies for OpenCV

# Open CV {{ ctx.opencv.libopencv.version }}

COPY --from=dependencies /data/{{ ctx.opencv.libopencv.fileName }} {{ ctx.opencv.libopencv.fileName }}
RUN echo "{{ ctx.opencv.libopencv.checksum }} {{ ctx.opencv.libopencv.fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.opencv.libopencv.fileName }} && \
    rm {{ ctx.opencv.libopencv.fileName }}

# Open CV python binding
COPY --from=dependencies /data/{{ ctx.opencv['libopencv-python'].fileName }} {{ ctx.opencv['libopencv-python'].fileName }}
RUN echo "{{ ctx.opencv['libopencv-python'].checksum }} {{ ctx.opencv['libopencv-python'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.opencv['libopencv-python'].fileName }} && \
    rm {{ ctx.opencv['libopencv-python'].fileName }}

# Open CV dev
COPY --from=dependencies /data/{{ ctx.opencv['libopencv-dev'].fileName }} {{ ctx.opencv['libopencv-dev'].fileName }}
RUN echo "{{ ctx.opencv['libopencv-dev'].checksum }} {{ ctx.opencv['libopencv-dev'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.opencv['libopencv-dev'].fileName }} && \
    rm {{ ctx.opencv['libopencv-dev'].fileName }}

# Open CV samples
COPY --from=dependencies /data/{{ ctx.opencv['libopencv-samples'].fileName }} {{ ctx.opencv['libopencv-samples'].fileName }}
RUN echo "{{ ctx.opencv['libopencv-samples'].checksum }} {{ ctx.opencv['libopencv-samples'].fileName }}" | md5sum -c - && \
    apt-get update && apt-get install -y --no-install-recommends /{{ ctx.opencv['libopencv-samples'].fileName }} && \
    rm {{ ctx.opencv['libopencv-samples'].fileName }}

{%- endif %}

# Install dependencies for TensorFlow
#RUN apt-get update && apt-get install -y \
#    hdf5-tools \
#    libhdf5-dev \
#    libhdf5-serial-dev \
#    libjpeg8-dev \
#    zip \
#    zlib1g-dev \
#    && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/*

#RUN python3 -m pip install -U numpy grpcio absl-py py-cpuinfo psutil portpicker grpcio six mock requests gast h5py astor termcolor

# Install TensorFlow
#RUN python3 -m pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v42 tensorflow-gpu
# can browse from https://developer.download.nvidia.com/compute/redist/jp/
# RUN python3 -m pip install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v42 tensorflow-gpu==$TF_VERSION+nv$NV_VERSION
